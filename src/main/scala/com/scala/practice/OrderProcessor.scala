package com.scala.practice

import com.scala.practice.data.Customer

import scala.io.Source

object OrderProcessor {

  def main(args: Array[String]): Unit = {
    val inpLines = Source.fromResource("Orders.csv").getLines.toArray
    val customers = inpLines.tail.map(toCustomer)
    println("Group all products and number of items sold")
    mapProductsToNumOfItems(customers).foreach(println)
    println("\nGroup all products by total revenue generated")
    mapProductsToTotalRevenue(customers).foreach(println)
    println("\nGroup total revenue generated by country")
    mapCountryToTotalRevenue(customers).foreach(println)
    println("\nGroup revenue generated by customer")
    mapCustomerToTotalRevenue(customers).foreach(println)
  }

  def toCustomer(x: String) = {
    val details = x.split(",")
    Customer(fName = details(0).dropRight(1).drop(1),
      lName = details(1).dropRight(1).drop(1),
      email = details(2).dropRight(1).drop(1),
      product = details(3),
      price = details(4).toInt,
      quantity = details(5).toInt,
      country = details(6))
  }

  def mapProductsToNumOfItems(cs: Array[Customer]) = cs.groupBy(_.product).mapValues(_.map(_.quantity).sum)

  def mapProductsToTotalRevenue(cs: Array[Customer]) = cs.groupBy(_.product).mapValues(_.map(c => c.quantity * c.price).sum)

  def mapCountryToTotalRevenue(cs: Array[Customer]) = cs.groupBy(_.country).mapValues(_.map(c => c.quantity * c.price).sum)

  def mapCustomerToTotalRevenue(cs: Array[Customer]) = cs.groupBy(c => s"${c.fName} ${c.lName}").mapValues(_.map(c => c.quantity * c.price).sum)

}

